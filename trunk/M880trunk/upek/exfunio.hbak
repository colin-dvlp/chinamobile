#ifndef EXFUNIO_H_
#define EXFUNIO_H_
//---------------For ZEM500-----------------
#define BCD2HEX(a) (((a) & 0x0F) + 10*((a)>>4))
#define HEX2BCD(a) (((a)/10)<<4 | ((a)%10))

#define LCD_WRAP 1
#define LCD_BOTTOM_LINE 2
#define LCD_TOP_LINE	4
#define LCD_HIGH_LIGHT	8
#define LCD_LEFT_LINE	16
#define LCD_RIGHT_LINE	32

#define MCU_CMD_NONE 0
#define MCU_CMD_KEY 1
#define MCU_CMD_VERSION 20
#define MCU_CMD_RTC 22
#define MCU_CMD_LIC 25
#define RCMD_LCD_SIZE 	33
#define CMD_LCD_STR		34
#define CMD_LCD_BRIGHT	35

#define MCU_CMD_HID 50

#define MCU_CMD_DOOR	110
	#define DOOR_SENSOR_BREAK 1	//ï¿½Å±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	#define DOOR_BUTTON		2	//ï¿½ï¿½ï¿½Å¿ï¿½ï¿½ï¿½
	#define DOOR_BREAK		3	//ï¿½ï¿½ï¿?
	#define DOOR_SENSOR_OPEN 4	//ï¿½ï¿½ï¿½ï¿½
	#define DOOR_SENSOR_CLOSE 5	//ï¿½ï¿½ï¿½ï¿½ï¿?

#define MCU_CMD_BATTERY 111
	#define BATTERY_None	2
	#define BATTERY_Internal 1
	#define BATTERY_External 0

#define MCU_CMD_ERROR -1
#define MCU_CMD_REPONSE 0xA5
#define MCU_CMD_OPTIONS 120
	#define RESET_OPTIONS	1	//ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
#define AUX_ON	0xFF
#define AUX_OFF 0

//Check the data from MCU. return
//	MCU_CMD_KEY for Key pressed
//	MCU_CMD_RTC for Real Time Clock Data
//  MCU_CMD_NONE for no data
//	MCU_CMD_ERROR for error
int BT232Check(char *buffer);
int ExCommand(char cmd, char *data, int DataLen, int Delay);
int BT232Wait(int CmdType, int TimeOut, char *Buffer);
int BT232GetChar(U32 timeout);
//void ExBeep(int delay);
void ExAuxOut(int AuxOnTime, int OpenDoorDelay);
void ExSetAuxOutDelay(int AuxOnTime, int OpenDoorDelay, int DoorSensorMode);
extern int gAuxOutDelay;
//void ExPlayVoice(int VoiceIndex);
void ExLightLED(int LEDIndex, int Light);
void ExEnableClock(int Enable);
void ExPowerOffStart(void);
//void ExPowerOff(int Suspend);
void ExSetPowerOnTime(int Hour, int Minute);
void ExPlayVoiceFrom(int VoiceStart, int VoiceEnd);
int GetMCUVersion(void);
void ExPowerRestart(void);
void ExShowLogo(int Language);
void LoadVoiceParam(void);
int ExAlarm(int Index, int Delay);
void ExGetLCDSize(int *Width, int *Height, int *Data);
int ExAlarmOff(int Index);
//int ExBell(int DelaySec);
int ExBellOff(void);
int ExFeedWatchDog(int i);

int ExIsFPReaderReady(void);
void ExPlayVoiceByMCU(int VoiceIndex);

extern int gAlarmDelay,gAlarmDelayIndex,gBellDelay;

//freq - Æµï¿½ï¿½ Hz
//intensity - ï¿½ï¿½Õ¼ï¿½È£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿? percent
//delay - ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ us
int ExGPIOBeep(int freq, int intensity, int delay);
//int ExCheckStrip(void);

int FlashInputs(void);

#define RCMD_VERSION	20
#define RCMD_RF_ENABLED	51
#define RCMD_LIC_FP 	101
#define RCMD_LIC_RECFP 	102
#define RCMD_LIC_RECLOG 103
#define RCMD_LIC_LOCK 	104
#define RCMD_LIC_NET 	105
#define RMCU_CMD_AUXOUT_LEN	106
#define RMCU_CMD_ALARM	107
#define RMCU_CMD_WATCHDOG 108

#define	RCMD_OUT_BELL	211
#define RCMD_LCD_BACK_LIGHT 212
#define RCMD_BEEP_ENABLE  56

#define RCMD_WG_OPTIONS 214
#define MCU_CMD_EXTWGIN	215
#define MCU_CMD_INTWGIN	216

int ExGetLicNum(BYTE Lic);
int ExGetLicFP(void);
int CheckLic_1(void);

int ExInit(void);
int FileSystemInit(void);
/*zzz
int LCDInit(void);
void LCDClear(void);
void LCDClearLine(int line);
void LCDWritef(int line, char * fmt, ...);
void LCDWriteStrLng(PLangDriver Lng, int row, int col, char *s, int flag);
void LCDWriteStr(int row, int col, char *s, int flag);
void LCDWriteStrID(int row, int col, int StrID);
void LCDWriteCenterStrID(int row, int StrID);
void LCDWriteLineStrID(int row, int StrID);
void LCDWriteCenterStr(int row, char *str);
void LCDWriteCenter(int Row, char *Text);
void LCDWriteLine(int row, char *Str);
void LCDFullALine(int row, char *hint);
char* PadRightStrStr(char *buf, char *Str, char *Value, int Width);
char* PadRightStrSID(char *buf, int StrID, char *Value, int Width);
char* PadRightIntSID(char *buf, int StrID, int Value, int Width);
*/
void DrawImage(char *image, int width, int height, int WhiteThreshold);

//typedef struct tm TTime;

void ResetBaseTime(void);

void SetRTCTimeByMCU(TTime *tt);
//void SetCurrentTime(TTime *tt);
void GetRTCTimeByMCU(TTime *t);

TTime *DecodeTime(time_t t, TTime *ts);
time_t EncodeTime(TTime *t);
int Buff2Time(char *buffer, TTime *t);
int TimeDiffSec(TTime t1, TTime t2);
int TimeAddSec(TTime *t, int Sec);
TTime *CalcDays(TTime *t);

void TestExFun(void);

void FinalSystem(void);

extern int ClockEnabled;
extern TTime gCurTime;
extern int gPowerState,WaitPowerOff;
extern int gLCDWidth, gLCDHeight, gLCDData;
//extern int gLCDCharWidth, gLCDRowCount, gRowHeight, MenuCharWidth;

#define RESETEXCMD
//ExCommand(4, LCDBuffer[0], 0, 1)

//Output function define, must <20
/*
#define IO_FUN_485_EN		0	//RS485 Send Enabled
#define IO_FUN_GREEN_LED	3//Green LED
#define IO_FUN_RED_LED		4	//Red LED
#define IO_FUN_FINGER		3	//Indicator finger detected
#define IO_FUN_WOD0			4	//Wiegand Output Data 0
#define IO_FUN_WOD1			5	//Wiegand Output Data 1
#define IO_FUN_LOCK0		6	//Open Lock BIT0
#define IO_FUN_LOCK1		7	//Open Lock BIT1
#define IO_FUN_ALARM		8	//Alarm
#define IO_FUN_BELL			9	//Scheduled Bell
#define IO_FUN_COM_SWITCH	10	//Switch line of communication
#define IO_FUN_BEEP			11	//Beep
*/
//Input function define must >=20
#define IO_FUN_WID0			20	//Wiegand Input Data 0
#define IO_FUN_WID1			21	//Wiegand Input Data 1
#define IO_FUN_STRIP		22	//Strip Detection
#define IO_FUN_CLEAR		23	//Clear Database Button
#define IO_FUN_VERIFY		24	//Start Verify Button
#define IO_FUN_ENROLL		25	//Start Enroll Button
#define IO_FUN_CANCEL		26	//Cancel Button
#define IO_FUN_OPEN_DET		27	//Door Open Detect
#define IO_FUN_USB_INT		28	//USB Int
#define IO_FUN_FPREADER_OK	29	//Fingerprint reader ready

#define INVALID_IO_PIN 'z'
extern BYTE GPIO_PIN[40];
int ExIsLockAndBellSame(void);
//ï¿½ï¿½Ê¼ï¿½ï¿½GPIOï¿½Ó¿ï¿½
int GPIOSetup(BYTE *GPIOFunDef);
//zzz int GPIOGetLevel(int index, int Default);
//zzz int GPIOSetLevel(int index, int High);

void RS485_setmode(U32 SendMode);
void Switch_mode(U32 RS485Mode);
void EnableDevice(int Enabled);

int getgmtime(void *timep, time_t t);
time_t getmktime(TTime *t);

void CheckRTCAdjust(void);  //ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ÒªÐ£×¼Ê±ï¿½ï¿?
int CalcRTCAdjust(TTime *NewTime, int MinInterval);  //ï¿½ï¿½ï¿½ï¿½Ð£×¼ï¿½ï¿½ï¿½ï¿½
int AdjustRTC(TTime *t);	//ï¿½ï¿½ï¿½ï¿½è¶¨ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½Ð£×?

void ExBeepN(int count);

void FinalSystem(void);

extern TTime MachineBaseTime;
extern int gHaveRTC;
extern BYTE *GetFontBuffer(int Size);

BYTE *LoadFile(char *FileName, int *FileSize);

//zzz
#define TICKS_PER_SECOND 2000000	//ZEM100 3686400
#define TICKS_PER_MS	2000						//ZEM100 3686
//

void ExPlayVoiceFromByMCU(int VoiceStart, int VoiceEnd);
void ExPlayVoiceByMCU(int VoiceIndex);
void ExBeepByMCU(int delay);
void ExSetExtWGIn(int BitsCount, int PulseWidth, int PulseInterval);
#endif /*EXFUNIO_H_*/
